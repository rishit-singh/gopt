CLucene doesn't have built-in bigramizers nor any standard way to create bigrams directly. You might have to create your own solution according to your application. 

Here, assuming your 16 bit tokens are the hexadecimal representations of words. You can create a bigram by combining two consecutive tokens in your array. 

Here's an example of how you might implement it in C++:

```c++
#include <vector>
#include <string>
#include <sstream>

using namespace std;

vector<string> bigramize(const vector<string>& tokens) {
    vector<string> bigrams;

    // Loop over tokens
    for (size_t i = 0; i < tokens.size() - 1; i++) {
        stringstream ss;
        ss << tokens[i] << "_" << tokens[i + 1];  // Combine two tokens
        bigrams.push_back(ss.str());  // Push to array of bigrams
    }

    return bigrams;
}
```

This example function, `bigramize(const vector<string>& tokens)`, takes as input a vector of string tokens and returns a new vector where each element is a bigram (two successive words joined by an underscore). Make sure to include the `<vector>`, `<string>` and `<sstream>` headers.

However, if your 16 bit tokens are not strings, you will need to adjust the function accordingly (for example, if they are integers, use a vector of integers, etc). 

This is simply a conceptual answer since CLucene doesn't support bigram natively. You'll have to implement your own way to use it as per your needs.
